let playerPositions = [{x:64, y:32}, {x:64, y:64}, {x:64, y:96}, {x:64, y:128}];

function showPlayerHpChangeNumber(hpChange) {
    let hpChangeNumber;
    if (hpChange !== 0) {
        hpChangeNumber = game.add.group();
        let xPos = 0;
        let absChange = Math.abs(hpChange);
        if (absChange >= 100) {
            hpChangeNumber.create(xPos, 0, 'displayui', Math.floor(absChange / 100));
            xPos += 4;
        }
        if (absChange >= 10) {
            hpChangeNumber.create(xPos, 0, 'displayui', Math.floor(absChange / 10));
            xPos += 4;
        }
        hpChangeNumber.create(xPos, 0, 'displayui', Math.floor(absChange % 10));
    }
    if (hpChange > 0) {
        hpChangeNumber.children.forEach(function (number) {
            number.tint = 0x00ff00;
        });
        hpChangeNumber['effectType'] = 'heal';
    }
    else {
        hpChangeNumber.children.forEach(function (number) {
            number.tint = 0xff0000;
        });
        hpChangeNumber['effectType'] = 'damage';
    }
    hpChangeNumber.scale.setTo(2.0);
    hpChangeNumber.position.setTo(this.x+this.sprite.x+this.sprite.width, this.y+this.sprite.y+this.sprite.height);
    hpChangeNumber.visible = false;
    this.effectNumbers.push(hpChangeNumber);
    this.animateEffectNumbers();
}

function animatePlayerEffectNumber() {
    if (this.effectNumbers.length > 0 && !this.isAnimatingNumber) {
        let player = this;
        let number = this.effectNumbers.shift();
        number.visible = true;

        let destinationY, destinationX, tween, tween2, tween3;
        switch (number['effectType']) {
            case 'damage':
                destinationY = number.y - 32;
                destinationX = number.x - 48;
                tween = this.game.add.tween(number).to( { y: destinationY }, 500, Phaser.Easing.Exponential.Out, true);
                tween2 = this.game.add.tween(number).to( { x: destinationX }, 1500, Phaser.Easing.Linear.None, true);

                this.isAnimatingNumber = true;
                tween.onComplete.add(function () {
                    tween3 = player.game.add.tween(number).to( { y: destinationY+32 }, 1000, Phaser.Easing.Bounce.Out, true);
                    tween3.onComplete.add(removeNumber);
                    startNextAnimation()
                });
                break;

            case 'heal':
                destinationY = number.y - 32;
                tween = this.game.add.tween(number).to( { y: destinationY }, 1000, Phaser.Easing.Linear.None, true);
                this.isAnimatingNumber = true;
                game.time.events.add(500, startNextAnimation, player);
                tween.onComplete.add(removeNumber);
                break;
        }

        function removeNumber() {
            number.kill();
            number.destroy(true, false);
        }

        function startNextAnimation() {
            player.isAnimatingNumber = false;
            player.animateEffectNumbers();
        }
    }
}
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.1 (Phaser v2.6.2)


/**
 * Player.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function Player(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType, posNum, playerInfo) {

	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);

    // this.info = playerInfo;

    this.playerClass = playerInfo.playerClass.toLowerCase();
    let spriteYPos = 10.0;
    if (this.playerClass === 'knight') spriteYPos = 6.0;
	this.game.add.sprite(0.0, 21.0, 'entity', 'shadow', this);
	this.sprite = this.game.add.sprite(0.0, spriteYPos, 'entity', this.playerClass, this);

	let _nametext = this.game.add.text(this.sprite.width/2, 0.0, playerInfo.name, {"font":"20px Arial", "fill":"#FFFFFF"}, this);
	_nametext.anchor.setTo(0.5, 0.0);
	_nametext.scale.setTo(0.3, 0.3);

    this.scale.setTo(2, 2);

    this.position.setTo(playerPositions[posNum].x * this.scale.x, playerPositions[posNum].y * this.scale.y);

    this.effectNumbers = [];
}

/** @type Phaser.Group */
let Player_proto = Object.create(Phaser.Group.prototype);
Player.prototype = Player_proto;
Player.prototype.constructor = Player;

/* --- end generated code --- */
// -- user code here --
Player.prototype.showHpChangeNumber = showPlayerHpChangeNumber;
Player.prototype.animateEffectNumbers = animatePlayerEffectNumber;