
// -- user code here --
function shakeChest() {
    let chest = this.chestClosed;
    ctwRotate();

    function ctwRotate() {
        chest.tween = game.add.tween(chest).to( { angle: 10 }, 100, Phaser.Easing.Linear.None, true);
        chest.tween.onComplete.add(cctwRotate);
    }
    function cctwRotate() {
        chest.tween = game.add.tween(chest).to( { angle: -10 }, 100, Phaser.Easing.Linear.None, true);
        chest.tween.onComplete.add(rotateBack);
    }
    function rotateBack() {
        chest.tween = game.add.tween(chest).to( { angle: 0 }, 100, Phaser.Easing.Linear.None, true);
        chest.tween.onComplete.add(waitFiveSec);
    }
    function waitFiveSec() {
        game.time.events.add(5000, ctwRotate, this);
    }
}

function chestOnClick() {
    this.chestClosed.tween.stop();
    this.chestClosed.visible = false;
    this.chestOpened.visible = true;
    sendMessage('/app/controller.rewards/' + code, {});
}
/* --- start generated code --- */

// Generated by  1.5.1 (Phaser v2.6.2)


/**
 * Reward.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function Reward(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType, ending) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);

	this.ending = ending;
	if (ending === 'victory') this.chestType = 'goldenchest';
	else if (ending === 'defeat') this.chestType = 'ironchest';
	this.chestClosed = this.game.add.button(64.0, 32.0, 'reward', this.onClick, this, null, this.chestType + 'closed', null, null, this);
    this.chestOpened = this.game.add.sprite(64.0, 30.0, 'reward', this.chestType + 'opened', this);
    this.chestOpened.visible = false;
    this.chestClosed.pivot.setTo(8, 8);
    this.chestOpened.pivot.setTo(8, 8);
    this.scale.setTo(scale);

    this.shake();
}

/** @type Phaser.Group */
let Reward_proto = Object.create(Phaser.Group.prototype);
Reward.prototype = Reward_proto;
Reward.prototype.constructor = Reward;

/* --- end generated code --- */
// -- user code here --
Reward.prototype.shake = shakeChest;
Reward.prototype.onClick = chestOnClick;