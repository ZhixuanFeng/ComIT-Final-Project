
// -- user code here --
let suitNames = ['diamond', 'club', 'heart', 'spade'];
let effectNames = ['attack', 'block', 'heal', 'mana', 'aoe', 'draw', 'revive', 'hate'];
let cardXPositions = [32, 80, 128, 176];
let cardXPositionsOdd = [56, 104, 152];
let cardYPosition = 30;

function cardClicked() {

}

function convertNumRankToText(num) {
    switch (num) {
        case 1:
            return 'A';
        case 11:
            return 'J';
        case 12:
            return 'Q';
        case 13:
            return 'K';
        default:
            return num;
    }
}
/* --- start generated code --- */

// Generated by  1.5.1 (Phaser v2.6.2)


/**
 * Card.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function Card(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType, xPos, cardInfo) {

	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);

	let x = xPos;
	let y = cardYPosition;
	if (cardInfo.taunt > 0) cardInfo.hate = cardInfo.taunt;
	this.info = cardInfo;
	this.cardFrame = this.game.add.button(0, 0, 'card', cardClicked, this, null, 'empty_card', null, null, this);
    if (cardInfo.indecks == 14)
        console.log('yes');
	let numOfEffect = 0;
	for (let i = 0; i < 8 && numOfEffect < 4; i++) {
	    let effectName = effectNames[i];
        if (cardInfo[effectName] > 0) {
            let effectIcon = this.game.add.sprite(8.0, 24.0 + numOfEffect * 9, 'card', effectName, this);
            effectIcon.scale.setTo(0.5, 0.5);
            let effectAmount = this.game.add.text(20.0, 22.0 + numOfEffect * 9, cardInfo[effectName], {'font':'bold 20px Arial'}, this);
            effectAmount.scale.setTo(0.5, 0.5);
            numOfEffect++;
        }
    }

	let suit = this.game.add.sprite(3.0, 13.0, 'card', suitNames[cardInfo.suit], this);
	suit.scale.setTo(0.75, 0.75);

	let rankFontStyle = cardInfo.suit === 0 || cardInfo.suit === 2 ? {"font":"bold 20px Arial", "fill":"#ff0000"} : {"font":"bold 20px Arial"};
	let rank = this.game.add.text(4.0, 3.0, convertNumRankToText(cardInfo.rank), rankFontStyle, this);
	rank.scale.setTo(0.5, 0.5);

	this.scale.setTo(2, 2);
    this.position.setTo(x*this.scale.x, y*this.scale.y);
}

/** @type Phaser.Group */
let Card_proto = Object.create(Phaser.Group.prototype);
Card.prototype = Card_proto;
Card.prototype.constructor = Card;

/* --- end generated code --- */
// -- user code here --
