
// -- user code here --
let selectedPlayer;

function playerClicked() {
    this.isSelected = !this.isSelected;
    if (this.isSelected) {
        if (hasSelectedAOE) {
            selectedPlayer = this;
            selectAllPlayers();
            targetingMode = targetingModeEnum.allPlayers;
        }
        else {
            selectedPlayer = this;
            this.graphics.visible = true;
            targetingMode = targetingModeEnum.player;
        }
        clearAllEnemySelection();
        selectedEnemy = undefined;
    }
    else {
        if (hasSelectedAOE) {
            clearAllPlayerSelection();
        }
        else {
            selectedPlayer = undefined;
            this.graphics.visible = false;
        }
        targetingMode = targetingModeEnum.none;
    }
    setEffects();
}

function cancelPlayerSelection() {
    this.isSelected = false;
    this.graphics.visible = false;
}

function selectAllPlayers() {
    players.forEach(function (player) {
        player.isSelected = true;
        player.graphics.visible = true;
    });
}

function clearAllPlayerSelection() {
    players.forEach(function (player) {
        player.cancelSelection();
    });
}

function updatePlayerInfo(playerInfo) {
    if (this.info.hp !== playerInfo.hp || this.info.maxHp !== playerInfo.maxHp) {
        this.setHp(playerInfo.hp, playerInfo.maxHp);
    }
    if (this.info.mana !== playerInfo.mana || this.info.maxMana !== playerInfo.maxMana) {
        this.setMana(playerInfo.mana, playerInfo.maxMana);
    }
    if (this.info.hate !== playerInfo.hate) {
        this.setHate(playerInfo.hate);
    }
    this.info = playerInfo;
}

function setPlayerHp(hp, maxHp) {
    this._hpText.setText(hp + '/' + maxHp);
}

function setPlayerMana(mana, maxMana) {
    this._manaText.setText(mana + '/' + maxMana);
}

function setPlayerHate(hate) {
    this._hateText.setText(hate);
}
/* --- start generated code --- */

// Generated by  1.5.1 (Phaser v2.6.2)


/**
 * Player.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function Player(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType, x, y, playerInfo) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);

    this.info = playerInfo;

    this.sprite = this.game.add.button(x, y, 'entity', playerClicked, this, null, 'player', null, null, this);

    let _nameText = this.game.add.text(0, 0, playerInfo.name, {"font":"bold 20px Arial", "boundsAlignH":"center"}, this);
    _nameText.setTextBounds(x*2, (y - this.sprite.height / 2)*2, this.sprite.width*2, 10);
    _nameText.scale.setTo(0.5, 0.5);

    let _stats = this.game.add.group(this);

    this.game.add.sprite(0.0, 0.0, 'card', 'heal', _stats);

    this._hpText = this.game.add.text(20.0, 2.0, playerInfo.hp + '/' + playerInfo.maxHp, {"font":"bold 20px Arial"}, _stats);
    this._hpText.scale.setTo(0.75, 0.75);

    this.game.add.sprite(0.0, 15.0, 'card', 'mana', _stats);

    this._manaText = this.game.add.text(20.0, 17.0, playerInfo.mana + '/' + playerInfo.maxMana, {"font":"bold 20px Arial"}, _stats);
    this._manaText.scale.setTo(0.75, 0.75);

    this.game.add.sprite(0.0, 30.0, 'card', 'hate', _stats);

    this._hateText = this.game.add.text(20.0, 32.0, '0', {"font":"bold 20px Arial"}, _stats);
    this._hateText.scale.setTo(0.75, 0.75);

    _stats.scale.setTo(0.5, 0.5);
    _stats.position.setTo(x, y + 35);

    this.scale.setTo(2, 2);

    this.borderWidth = this.sprite.width * this.scale.x + 6;
    this.borderHeight = this.sprite.height * this.scale.y + 6;

    this.graphics = game.add.graphics();
    this.graphics.lineStyle(4, 0xFFFF00, 1);
    this.graphics.drawRoundedRect(this.sprite.x * this.scale.x - 3, this.sprite.y * this.scale.y - 3, this.borderWidth, this.borderHeight, 10);
    this.graphics.visible = false;
}

/** @type Phaser.Group */
let Player_proto = Object.create(Phaser.Group.prototype);
Player.prototype = Player_proto;
Player.prototype.constructor = Player;

/* --- end generated code --- */
// -- user code here --
Player.prototype.cancelSelection = cancelPlayerSelection;
Player.prototype.updatePlayerInfo = updatePlayerInfo;
Player.prototype.setHp = setPlayerHp;
Player.prototype.setMana = setPlayerMana;
Player.prototype.setHate = setPlayerHate;
